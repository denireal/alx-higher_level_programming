Module: The 4-print_square
==========================

>>> print_square = __import__('4-print_square').print_square

Printing a square with a size of 5:

>>> print_square(5)
#####
#####
#####
#####
#####

Attempting to print a square with a size of 0:

>>> print_square(0)

Attempting to print a square with a floating-point number as the size:

>>> print_square(1.0)
Traceback (most recent call last):
...
TypeError: size must be an integer

Attempting to print a square with a string as the size:

>>> print_square('2')
Traceback (most recent call last):
...
TypeError: size must be an integer

Attempting to print a square with a negative number as the size:

>>> print_square(-2)
Traceback (most recent call last):
...
ValueError: size must be >= 0

Attempting to print a square with None as the size:

>>> print_square(None)
Traceback (most recent call last):
...
TypeError: size must be an integer

Attempting to print a square without providing the size argument:

>>> print_square()
Traceback (most recent call last):
...
TypeError: print_square() missing 1 required positional argument: 'size'

General Usage and Handling:
---------------------------

- The function prints a square made of '#' characters.
- The size argument must be an integer.
- The size must be greater than or equal to 0; otherwise, a ValueError is raised.
- If the size is a floating-point number or a non-integer, a TypeError is raised.
- If the size is None, a TypeError is raised.
- If the function is called without providing the size argument, a TypeError is raised.

Example:
--------

```python
# Importing the function
print_square = __import__('4-print_square').print_square

# Printing a square with a size of 3
print_square(3)

# Output:
# ###
# ###
# ###
