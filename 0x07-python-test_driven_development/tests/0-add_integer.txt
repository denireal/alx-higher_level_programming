Using the 0-add_integer module
==============================

This document, formatted in restructured text, provides guidance
on using the ``add_integer`` function from the ``0-add_integer`` module.

To get started, import the ``add_integer`` function
from the ``0-add_integer`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

Ensure the presence of a module docstring:

    >>> m = __import__("0-add_integer").__doc__
    >>> len(m) > 1
    True

Confirm the existence of a function docstring:

    >>> f = __import__("0-add_integer").add_integer.__doc__
    >>> len(f) > 1
    True

Basic usage example:

    >>> add_integer(1, 2)
    3

Test with a single integer argument:

    >>> add_integer(2)
    100

Test with an integer argument and observe the default second parameter:

    >>> add_integer(0)
    98

Perform addition with a positive and a negative number:

    >>> add_integer(2, -4)
    -2

Perform addition with a negative and a positive number:

    >>> add_integer(-6, 8)
    2

Evaluate addition over a range of values:

    >>> [add_integer(i, i ** 2) for i in range(6)]
    [0, 2, 6, 12, 20, 30]

Examine with a float and a negative input:

    >>> add_integer(100.3, -2)
    98

Handle float overflow:

    >>> add_integer(1500.5)
    1598

Handle float NaN:

    >>> add_integer(float('NaN'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

Handle string input:

    >>> add_integer(4, "School")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Handle None input:

    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Evaluate with double negative float input:

    >>> add_integer(-100.5, -10.8)
    -110

Evaluate with double string input:

    >>> add_integer("holberton", "school")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
